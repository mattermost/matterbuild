// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/matterbuild/server (interfaces: GithubRepositoriesService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	os "os"
	reflect "reflect"
)

// MockGithubRepositoriesService is a mock of GithubRepositoriesService interface
type MockGithubRepositoriesService struct {
	ctrl     *gomock.Controller
	recorder *MockGithubRepositoriesServiceMockRecorder
}

// MockGithubRepositoriesServiceMockRecorder is the mock recorder for MockGithubRepositoriesService
type MockGithubRepositoriesServiceMockRecorder struct {
	mock *MockGithubRepositoriesService
}

// NewMockGithubRepositoriesService creates a new mock instance
func NewMockGithubRepositoriesService(ctrl *gomock.Controller) *MockGithubRepositoriesService {
	mock := &MockGithubRepositoriesService{ctrl: ctrl}
	mock.recorder = &MockGithubRepositoriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubRepositoriesService) EXPECT() *MockGithubRepositoriesServiceMockRecorder {
	return m.recorder
}

// DeleteReleaseAsset mocks base method
func (m *MockGithubRepositoriesService) DeleteReleaseAsset(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReleaseAsset", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReleaseAsset indicates an expected call of DeleteReleaseAsset
func (mr *MockGithubRepositoriesServiceMockRecorder) DeleteReleaseAsset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReleaseAsset", reflect.TypeOf((*MockGithubRepositoriesService)(nil).DeleteReleaseAsset), arg0, arg1, arg2, arg3)
}

// GetCommit mocks base method
func (m *MockGithubRepositoriesService) GetCommit(arg0 context.Context, arg1, arg2, arg3 string) (*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommit indicates an expected call of GetCommit
func (mr *MockGithubRepositoriesServiceMockRecorder) GetCommit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockGithubRepositoriesService)(nil).GetCommit), arg0, arg1, arg2, arg3)
}

// GetReleaseByTag mocks base method
func (m *MockGithubRepositoriesService) GetReleaseByTag(arg0 context.Context, arg1, arg2, arg3 string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseByTag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseByTag indicates an expected call of GetReleaseByTag
func (mr *MockGithubRepositoriesServiceMockRecorder) GetReleaseByTag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseByTag", reflect.TypeOf((*MockGithubRepositoriesService)(nil).GetReleaseByTag), arg0, arg1, arg2, arg3)
}

// ListReleaseAssets mocks base method
func (m *MockGithubRepositoriesService) ListReleaseAssets(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListOptions) ([]*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleaseAssets", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReleaseAssets indicates an expected call of ListReleaseAssets
func (mr *MockGithubRepositoriesServiceMockRecorder) ListReleaseAssets(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseAssets", reflect.TypeOf((*MockGithubRepositoriesService)(nil).ListReleaseAssets), arg0, arg1, arg2, arg3, arg4)
}

// ListTags mocks base method
func (m *MockGithubRepositoriesService) ListTags(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.RepositoryTag, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.RepositoryTag)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTags indicates an expected call of ListTags
func (mr *MockGithubRepositoriesServiceMockRecorder) ListTags(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockGithubRepositoriesService)(nil).ListTags), arg0, arg1, arg2, arg3)
}

// UploadReleaseAsset mocks base method
func (m *MockGithubRepositoriesService) UploadReleaseAsset(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.UploadOptions, arg5 *os.File) (*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadReleaseAsset", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadReleaseAsset indicates an expected call of UploadReleaseAsset
func (mr *MockGithubRepositoriesServiceMockRecorder) UploadReleaseAsset(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReleaseAsset", reflect.TypeOf((*MockGithubRepositoriesService)(nil).UploadReleaseAsset), arg0, arg1, arg2, arg3, arg4, arg5)
}
