// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/matterbuild/server (interfaces: GithubGitService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	reflect "reflect"
)

// MockGithubGitService is a mock of GithubGitService interface
type MockGithubGitService struct {
	ctrl     *gomock.Controller
	recorder *MockGithubGitServiceMockRecorder
}

// MockGithubGitServiceMockRecorder is the mock recorder for MockGithubGitService
type MockGithubGitServiceMockRecorder struct {
	mock *MockGithubGitService
}

// NewMockGithubGitService creates a new mock instance
func NewMockGithubGitService(ctrl *gomock.Controller) *MockGithubGitService {
	mock := &MockGithubGitService{ctrl: ctrl}
	mock.recorder = &MockGithubGitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubGitService) EXPECT() *MockGithubGitServiceMockRecorder {
	return m.recorder
}

// CreateRef mocks base method
func (m *MockGithubGitService) CreateRef(arg0 context.Context, arg1, arg2 string, arg3 *github.Reference) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRef", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRef indicates an expected call of CreateRef
func (mr *MockGithubGitServiceMockRecorder) CreateRef(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRef", reflect.TypeOf((*MockGithubGitService)(nil).CreateRef), arg0, arg1, arg2, arg3)
}

// CreateTag mocks base method
func (m *MockGithubGitService) CreateTag(arg0 context.Context, arg1, arg2 string, arg3 *github.Tag) (*github.Tag, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Tag)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockGithubGitServiceMockRecorder) CreateTag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockGithubGitService)(nil).CreateTag), arg0, arg1, arg2, arg3)
}

// GetRef mocks base method
func (m *MockGithubGitService) GetRef(arg0 context.Context, arg1, arg2, arg3 string) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRef", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRef indicates an expected call of GetRef
func (mr *MockGithubGitServiceMockRecorder) GetRef(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRef", reflect.TypeOf((*MockGithubGitService)(nil).GetRef), arg0, arg1, arg2, arg3)
}

// GetRefs mocks base method
func (m *MockGithubGitService) GetRefs(arg0 context.Context, arg1, arg2, arg3 string) ([]*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRefs indicates an expected call of GetRefs
func (mr *MockGithubGitServiceMockRecorder) GetRefs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefs", reflect.TypeOf((*MockGithubGitService)(nil).GetRefs), arg0, arg1, arg2, arg3)
}
